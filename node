centroids.append(Point32(x=centroid[0], y=centroid[1], z=centroid[2]))

        # Publish centroid point cloud
        if centroids:
            centers_msg = PointCloud()
            centers_msg.header = msg.header
            centers_msg.points = centroids
            self.publisher.publish(centers_msg)
            self.get_logger().info(f"Published {len(centroids)} cone centroids")
        else:
            self.get_logger().info("DBSCAN found no clusters")


def main():
    rclpy.init()
    node = ConeDetector()
    rclpy.spin(node)
    node.destroy_node()
    rclpy.shutdown()


if __name__ == '__main__':
    main()

import rclpy
from rclpy.node import Node
from sensor_msgs.msg import PointCloud
from visualization_msgs.msg import Marker, MarkerArray


class ConeVisualizer(Node):
    def __init__(self):
        super().__init__('cone_visualizer')

        self.subscription = self.create_subscription(
            PointCloud,
            '/cone_centroids',
            self.visualize_cones,
            10
        )
        self.publisher = self.create_publisher(MarkerArray, '/cone_markers', 10)

    def visualize_cones(self, msg):
        marker_array = MarkerArray()

        for i, point in enumerate(msg.points):
            marker = Marker()
            marker.header.frame_id = msg.header.frame_id  # Keep frame consistent with Lidar
            marker.header.stamp = self.get_clock().now().to_msg()
            marker.ns = "cone_markers"
            marker.id = i
            marker.type = Marker.CYLINDER
            marker.action = Marker.ADD

            marker.pose.position.x = point.x
            marker.pose.position.y = point.y
            marker.pose.position.z = point.z

            marker.pose.orientation.w = 1.0

            marker.scale.x = 0.3
            marker.scale.y = 0.3
            marker.scale.z = 0.5

            marker.color.r = 1.0
            marker.color.g = 1.0
            marker.color.b = 0.0  # Yellow cones
            marker.color.a = 1.0

            marker.lifetime.sec = 2  # Optional: auto-expire
            marker_array.markers.append(marker)

        self.publisher.publish(marker_array)
        self.get_logger().info(f"Published {len(marker_array.markers)} cone markers")


def main():
    rclpy.init()
    node = ConeVisualizer()
    rclpy.spin(node)
    node.destroy_node()
    rclpy.shutdown()


if __name__ == "__main__":
    main()
